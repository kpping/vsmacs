{
  "name": "vsmacs",
  "displayName": "VSmacs",
  "description": "Emacs Key Bindings for Visual Studio Code. No Kill Ring. No Fancy Things.",
  "version": "0.11.0",
  "license": "MIT",
  "publisher": "kpping",
  "engines": {
    "vscode": "^1.58.0"
  },
  "categories": [
    "Keymaps"
  ],
  "keywords": [
    "keymaps",
    "emacs",
    "key bindings"
  ],
  "activationEvents": [
    "*"
  ],
  "main": "./out/extension.js",
  "contributes": {
    "commands": [],
    "keybindings": [
      {
        "key": "ctrl+n",
        "command": "notebook.focusNextEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'none' && notebookEditorCursorAtBoundary != 'top'"
      },
      {
        "key": "ctrl+n",
        "command": "gettingStarted.next",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
      },
      {
        "key": "ctrl+n",
        "command": "breadcrumbs.selectFocused",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "ctrl+n",
        "command": "cursorDown",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+n",
        "command": "history.showNext",
        "when": "historyNavigationEnabled && historyNavigationWidget"
      },
      {
        "key": "ctrl+n",
        "command": "interactive.history.next",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'none' && interactiveInputCursorAtBoundary != 'top'"
      },
      {
        "key": "ctrl+n",
        "command": "list.focusDown",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "ctrl+n",
        "command": "notifications.focusNextToast",
        "when": "notificationFocus && notificationToastsVisible"
      },
      {
        "key": "ctrl+n",
        "command": "scm.viewNextCommit",
        "when": "scmInputIsInLastPosition && scmRepository && !suggestWidgetVisible"
      },
      {
        "key": "ctrl+n",
        "command": "selectNextSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+n",
        "command": "settings.action.focusSettingsFile",
        "when": "inSettingsSearch && !suggestWidgetVisible"
      },
      {
        "key": "ctrl+n",
        "command": "settings.action.focusSettingsFromSearch",
        "when": "inSettingsSearch && !suggestWidgetVisible"
      },
      {
        "key": "ctrl+n",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
      },
      {
        "key": "ctrl+n",
        "command": "workbench.action.interactivePlayground.arrowDown",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
      },
      {
        "key": "ctrl+n",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
      },
      {
        "key": "ctrl+n",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
      },
      {
        "key": "ctrl+a",
        "command": "cursorLineStart",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+e",
        "command": "cursorLineEnd",
        "when": "textInputFocus"
      },
      {
        "key": "alt+f",
        "command": "cursorWordEndRight",
        "when": "textInputFocus"
      },
      {
        "key": "alt+b",
        "command": "cursorWordLeft",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+x shift+,",
        "command": "cursorTop",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+x shift+.",
        "command": "cursorBottom",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+b",
        "command": "notebook.fold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
      },
      {
        "key": "ctrl+b",
        "command": "settings.action.focusTOC",
        "when": "inSettingsEditor && settingRowFocus"
      },
      {
        "key": "ctrl+b",
        "command": "gettingStarted.prev",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
      },
      {
        "key": "ctrl+b",
        "command": "breadcrumbs.focusPrevious",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "ctrl+b",
        "command": "cursorLeft",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+b",
        "command": "list.collapse",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "ctrl+b",
        "command": "notification.collapse",
        "when": "notificationFocus"
      },
      {
        "key": "ctrl+b",
        "command": "previousCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedFirstFocus && !inputFocus"
      },
      {
        "key": "ctrl+b",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
      },
      {
        "key": "ctrl+b",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
      },
      {
        "key": "ctrl+f",
        "command": "notebook.unfold",
        "when": "notebookEditorFocused && !inputFocus && activeEditor == 'workbench.editor.notebook'"
      },
      {
        "key": "ctrl+f",
        "command": "gettingStarted.next",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
      },
      {
        "key": "ctrl+f",
        "command": "breadcrumbs.focusNext",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "ctrl+f",
        "command": "cursorRight",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+f",
        "command": "list.expand",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "ctrl+f",
        "command": "nextCompressedFolder",
        "when": "explorerViewletCompressedFocus && explorerViewletVisible && filesExplorerFocus && !explorerViewletCompressedLastFocus && !inputFocus"
      },
      {
        "key": "ctrl+f",
        "command": "notification.expand",
        "when": "notificationFocus"
      },
      {
        "key": "ctrl+f",
        "command": "workbench.banner.focusNextAction",
        "when": "bannerFocused"
      },
      {
        "key": "ctrl+f",
        "command": "workbench.statusBar.focusNext",
        "when": "statusBarFocused"
      },
      {
        "key": "ctrl+p",
        "command": "notebook.focusPreviousEditor",
        "when": "config.notebook.navigation.allowNavigateToSurroundingCells && editorTextFocus && inputFocus && notebookEditorFocused && notebookEditorCursorAtBoundary != 'bottom' && notebookEditorCursorAtBoundary != 'none'"
      },
      {
        "key": "ctrl+p",
        "command": "gettingStarted.prev",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
      },
      {
        "key": "ctrl+p",
        "command": "cursorUp",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+p",
        "command": "history.showPrevious",
        "when": "historyNavigationEnabled && historyNavigationWidget"
      },
      {
        "key": "ctrl+p",
        "command": "interactive.history.previous",
        "when": "!suggestWidgetVisible && resourceScheme == 'vscode-interactive' && interactiveInputCursorAtBoundary != 'bottom' && interactiveInputCursorAtBoundary != 'none'"
      },
      {
        "key": "ctrl+p",
        "command": "list.focusUp",
        "when": "listFocus && !inputFocus"
      },
      {
        "key": "ctrl+p",
        "command": "notifications.focusPreviousToast",
        "when": "notificationFocus && notificationToastsVisible"
      },
      {
        "key": "ctrl+p",
        "command": "scm.viewPreviousCommit",
        "when": "scmInputIsInFirstPosition && scmRepository && !suggestWidgetVisible"
      },
      {
        "key": "ctrl+p",
        "command": "selectPrevSuggestion",
        "when": "suggestWidgetMultipleSuggestions && suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+p",
        "command": "showPrevParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
      },
      {
        "key": "ctrl+p",
        "command": "workbench.action.interactivePlayground.arrowUp",
        "when": "interactivePlaygroundFocus && !editorTextFocus"
      },
      {
        "key": "ctrl+p",
        "command": "workbench.banner.focusPreviousAction",
        "when": "bannerFocused"
      },
      {
        "key": "ctrl+p",
        "command": "workbench.statusBar.focusPrevious",
        "when": "statusBarFocused"
      },
      {
        "key": "ctrl+/",
        "command": "undo"
      },
      {
        "key": "ctrl+shift+-",
        "command": "undo"
      },
      {
        "key": "ctrl+x u",
        "command": "undo"
      },
      {
        "key": "ctrl+.",
        "command": "redo"
      },
      {
        "key": "ctrl+s",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
      },
      {
        "key": "ctrl+r",
        "command": "actions.find",
        "when": "editorFocus || editorIsOpen"
      },
      {
        "key": "ctrl+s",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus && findInputFocussed"
      },
      {
        "key": "ctrl+r",
        "command": "editor.action.previousMatchFindAction",
        "when": "editorFocus && findInputFocussed"
      },
      {
        "key": "ctrl+g",
        "command": "editor.action.cancelSelectionAnchor",
        "when": "editorTextFocus && selectionAnchorSet"
      },
      {
        "command": "editor.debug.action.closeExceptionWidget",
        "when": "exceptionWidgetVisible"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.hideInterfaceOverview",
        "when": "interfaceOverviewVisible"
      },
      {
        "key": "ctrl+g",
        "command": "notebook.cell.quitEdit",
        "when": "inputFocus && notebookEditorFocused && !editorHasMultipleSelections && !editorHasSelection && !editorHoverVisible"
      },
      {
        "key": "ctrl+g",
        "command": "notifications.hideList",
        "when": "notificationCenterVisible"
      },
      {
        "key": "ctrl+g",
        "command": "settings.action.clearSearchResults",
        "when": "inSettingsEditor && inSettingsSearch"
      },
      {
        "key": "ctrl+g",
        "command": "settings.action.focusLevelUp",
        "when": "inSettingsEditor && !inSettingsJSONEditor && !inSettingsSearch"
      },
      {
        "key": "ctrl+g",
        "command": "search.action.focusQueryEditorWidget",
        "when": "inSearchEditor"
      },
      {
        "key": "ctrl+g",
        "command": "search.action.cancel",
        "when": "listFocus && searchViewletVisible && !inputFocus && searchState != '0'"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.terminal.clearSelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected && !terminalFindVisible"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.terminal.navigationModeExit",
        "when": "accessibilityModeEnabled && terminalA11yTreeFocus && terminalProcessSupported"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.terminal.hideFind",
        "when": "terminalFindVisible && terminalFocus && terminalProcessSupported"
      },
      {
        "key": "ctrl+g",
        "command": "welcome.goBack",
        "when": "inWelcome && activeEditor == 'gettingStartedPage'"
      },
      {
        "key": "ctrl+g",
        "command": "breadcrumbs.selectEditor",
        "when": "breadcrumbsActive && breadcrumbsVisible"
      },
      {
        "key": "ctrl+g",
        "command": "cancelLinkedEditingInput",
        "when": "LinkedEditingInputVisible && editorTextFocus"
      },
      {
        "key": "ctrl+g",
        "command": "cancelRenameInput",
        "when": "editorFocus && renameInputVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeAccessibilityHelp",
        "when": "accessibilityHelpWidgetVisible && editorFocus"
      },
      {
        "key": "ctrl+g",
        "command": "closeBreakpointWidget",
        "when": "breakpointWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+g",
        "command": "closeDirtyDiff",
        "when": "dirtyDiffVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeFindWidget",
        "when": "editorFocus && findWidgetVisible && !isComposing"
      },
      {
        "key": "ctrl+g",
        "command": "closeMarkersNavigation",
        "when": "editorFocus && markersNavigationVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeParameterHints",
        "when": "editorFocus && parameterHintsVisible"
      },
      {
        "key": "ctrl+g",
        "command": "closeReferenceSearch",
        "when": "inReferenceSearchEditor && !config.editor.stablePeek"
      },
      {
        "key": "ctrl+g",
        "command": "closeReferenceSearch",
        "when": "referenceSearchVisible && !config.editor.stablePeek"
      },
      {
        "key": "ctrl+g",
        "command": "closeReplaceInFilesWidget",
        "when": "replaceInputBoxFocus && searchViewletVisible"
      },
      {
        "key": "ctrl+g",
        "command": "editor.action.inlineSuggest.hide",
        "when": "inlineSuggestionVisible"
      },
      {
        "key": "ctrl+g",
        "command": "editor.action.webvieweditor.hideFind",
        "when": "webviewFindWidgetVisible && !editorFocus && activeEditor == 'WebviewEditor'"
      },
      {
        "key": "ctrl+g",
        "command": "editor.cancelOperation",
        "when": "cancellableOperation"
      },
      {
        "key": "ctrl+g",
        "command": "editor.closeCallHierarchy",
        "when": "callHierarchyVisible && !config.editor.stablePeek"
      },
      {
        "key": "ctrl+g",
        "command": "editor.closeTestPeek",
        "when": "testing.isInPeek && !config.editor.stablePeek || testing.isPeekVisible && !config.editor.stablePeek"
      },
      {
        "key": "ctrl+g",
        "command": "editor.gotoNextSymbolFromResult.cancel",
        "when": "hasSymbols"
      },
      {
        "key": "ctrl+g",
        "command": "filesExplorer.cancelCut",
        "when": "explorerResourceCut && explorerViewletVisible && filesExplorerFocus && !inputFocus"
      },
      {
        "key": "ctrl+g",
        "command": "hideSuggestWidget",
        "when": "suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+g",
        "command": "keybindings.editor.clearSearchResults",
        "when": "inKeybindings && inKeybindingsSearch"
      },
      {
        "key": "ctrl+g",
        "command": "leaveEditorMessage",
        "when": "messageVisible"
      },
      {
        "key": "ctrl+g",
        "command": "leaveSnippet",
        "when": "editorTextFocus && inSnippetMode"
      },
      {
        "key": "ctrl+g",
        "command": "list.clear",
        "when": "listFocus && listHasSelectionOrFocus && !inputFocus"
      },
      {
        "key": "ctrl+g",
        "command": "notebook.hideFind",
        "when": "notebookEditorFocused && notebookFindWidgetFocused"
      },
      {
        "key": "ctrl+g",
        "command": "notifications.hideToasts",
        "when": "notificationToastsVisible"
      },
      {
        "key": "ctrl+g",
        "command": "notifications.hideToasts",
        "when": "notificationFocus && notificationToastsVisible"
      },
      {
        "key": "ctrl+g",
        "command": "removeSecondaryCursors",
        "when": "editorHasMultipleSelections && textInputFocus"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.closeQuickOpen",
        "when": "inQuickOpen"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.exitZenMode",
        "when": "inZenMode"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.action.hideComment",
        "when": "commentEditorFocused"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.banner.focusBanner",
        "when": "bannerFocused"
      },
      {
        "key": "ctrl+g",
        "command": "workbench.statusBar.clearFocus",
        "when": "statusBarFocused"
      },
      {
        "key": "ctrl+space",
        "command": "vsmacs.selectMode.start",
        "when": "textInputFocus && !editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+space",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && editorHasSelection && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+space",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && !editorHasSelection && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+space",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+g",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && editorHasSelection && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+g",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && !editorHasSelection && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+g",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "escape",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && editorHasSelection && vsmacs.selectMode.value"
      },
      {
        "key": "escape",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && !editorHasSelection && vsmacs.selectMode.value"
      },
      {
        "key": "escape",
        "command": "vsmacs.selectMode.stop",
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+f",
        "command": "cursorRightSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+b",
        "command": "cursorLeftSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+p",
        "command": "cursorUpSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+n",
        "command": "cursorDownSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+a",
        "command": "cursorLineStartSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+e",
        "command": "cursorLineEndSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+f",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorRightSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+b",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorLeftSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+p",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorUpSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+n",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorDownSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+a",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorLineStartSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+e",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorLineEndSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "alt+f",
        "command": "cursorWordEndRightSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "alt+f",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorWordEndRightSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "alt+b",
        "command": "cursorWordLeftSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "alt+b",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorWordLeftSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+x h",
        "command": "editor.action.selectAll"
      },
      {
        "key": "ctrl+x shift+,",
        "command": "cursorTopSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+x shift+,",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorTopSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+x shift+.",
        "command": "cursorBottomSelect",
        "when": "textInputFocus && vsmacs.selectMode.value"
      },
      {
        "key": "ctrl+x shift+.",
        "command": "vsmacs.utils.commands",
        "args": [
          "vsmacs.selectMode.start",
          "cursorBottomSelect"
        ],
        "when": "textInputFocus && editorHasSelection && !vsmacs.selectMode.value"
      },
      {
        "key": "alt+w",
        "command": "vsmacs.utils.commands",
        "args": [
          "editor.action.clipboardCopyAction",
          "vsmacs.selectMode.stop"
        ],
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+w",
        "command": "editor.action.clipboardCutAction",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+y",
        "command": "editor.action.clipboardPasteAction",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+c",
        "command": "vsmacs.utils.commands",
        "args": [
          "editor.action.clipboardCopyAction",
          "vsmacs.selectMode.stop"
        ],
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+x ctrl+x",
        "command": "editor.action.clipboardCutAction",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+x x",
        "command": "editor.action.clipboardCutAction",
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+k",
        "command": "vsmacs.utils.commands",
        "args": [
          "cursorLineEndSelect",
          "editor.action.clipboardCutAction"
        ],
        "when": "textInputFocus"
      },
      {
        "key": "ctrl+j",
        "command": "vsmacs.utils.commands",
        "args": [
          "lineBreakInsert",
          "cursorDown",
          "cursorHome"
        ],
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+m",
        "command": "vsmacs.utils.commands",
        "args": [
          "lineBreakInsert",
          "cursorDown",
          "cursorHome"
        ],
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+o",
        "command": "lineBreakInsert",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+d",
        "command": "deleteRight",
        "when": "textInputFocus"
      },
      {
        "key": "alt+backspace",
        "command": "deleteWordLeft",
        "when": "textInputFocus && !editorReadonly"
      },
      {
        "key": "alt+d",
        "command": "deleteWordRight",
        "when": "textInputFocus && !editorReadonly"
      },
      {
        "key": "ctrl+x ctrl+s",
        "command": "workbench.action.files.save"
      },
      {
        "key": "ctrl+x s",
        "command": "workbench.action.files.saveAll"
      },
      {
        "key": "ctrl+x ctrl+w",
        "command": "workbench.action.files.saveAs"
      },
      {
        "key": "ctrl+x ctrl+f",
        "command": "workbench.action.quickOpen"
      },
      {
        "key": "ctrl+x ctrl+c",
        "command": "workbench.action.closeActiveEditor"
      },
      {
        "key": "ctrl+x ctrl+b",
        "command": "workbench.action.quickOpenPreviousRecentlyUsedEditorInGroup"
      },
      {
        "key": "ctrl+x 3",
        "command": "workbench.action.splitEditor"
      },
      {
        "key": "ctrl+x 2",
        "command": "workbench.action.splitEditorOrthogonal"
      },
      {
        "key": "ctrl+x 0",
        "command": "workbench.action.closeActiveEditor"
      },
      {
        "key": "ctrl+x o",
        "command": "workbench.action.focusNextGroup"
      },
      {
        "key": "ctrl+x space",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
      },
      {
        "key": "ctrl+'",
        "command": "editor.action.triggerSuggest",
        "when": "editorHasCompletionItemProvider && textInputFocus && !editorReadonly"
      },
      {
        "key": "ctrl+x space",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+'",
        "command": "toggleSuggestionDetails",
        "when": "suggestWidgetVisible && textInputFocus"
      },
      {
        "key": "ctrl+x .",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+;",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+x .",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
      },
      {
        "key": "ctrl+;",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
      },
      {
        "key": "ctrl+x /",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "alt+/",
        "command": "editor.action.commentLine",
        "when": "editorTextFocus && !editorReadonly"
      },
      {
        "key": "ctrl+x /",
        "command": "toggleExplainMode",
        "when": "suggestWidgetVisible"
      },
      {
        "key": "alt+/",
        "command": "toggleExplainMode",
        "when": "suggestWidgetVisible"
      },
      {
        "key": "alt+x",
        "command": "workbench.action.showCommands"
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run compile",
    "compile": "tsc -p ./",
    "watch": "tsc -watch -p ./",
    "lint": "eslint src --ext ts",
    "format": "npx prettier --write ."
  },
  "devDependencies": {
    "@types/glob": "^7.1.3",
    "@types/mocha": "^8.2.2",
    "@types/node": "14.x",
    "@types/vscode": "^1.58.0",
    "@typescript-eslint/eslint-plugin": "^4.26.0",
    "@typescript-eslint/parser": "^4.26.0",
    "eslint": "^7.27.0",
    "eslint-config-prettier": "^8.3.0",
    "glob": "^7.1.7",
    "mocha": "^8.4.0",
    "prettier": "2.3.2",
    "typescript": "^4.3.2",
    "vscode-test": "^1.5.2"
  },
  "homepage": "https://github.com/kpping/vsmacs/blob/master/README.md",
  "bugs": "https://github.com/kpping/vsmacs/issues",
  "repository": {
    "type": "git",
    "url": "https://github.com/kpping/vsmacs.git"
  }
}
